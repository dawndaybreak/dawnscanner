#!/usr/bin/env ruby

require 'getoptlong'
require 'json'
require 'terminal-table'

require 'justify'

require 'codesake-commons'
require 'codesake-dawn'

APPNAME = File.basename($0)
LIST_KNOWN_FRAMEWORK  = %w(rails sinatra padrino)
VALID_OUTPUT_FORMAT   = %w(console json csv html)

$logger  = Codesake::Commons::Logging.instance
opts    = GetoptLong.new(
  # report formatting options
  [ '--ascii-tabular-report',   '-a',   GetoptLong::NO_ARGUMENT],
  [ '--json',                   '-j',   GetoptLong::NO_ARGUMENT],
  [ '--html',                   '-H',   GetoptLong::NO_ARGUMENT],

  # MVC forcing
  [ '--rails',                  '-r',   GetoptLong::NO_ARGUMENT],
  [ '--sinatra',                '-s',   GetoptLong::NO_ARGUMENT],
  [ '--padrino',                '-p',   GetoptLong::NO_ARGUMENT],

  [ '--gem-lock',               '-G',   GetoptLong::REQUIRED_ARGUMENT],
  [ '--count-only',             '-C',   GetoptLong::NO_ARGUMENT],
  [ '--exit-on-warn',           '-z',   GetoptLong::NO_ARGUMENT],

  # Disable checks by family type
  [ '--disable-cve-bulletins',          GetoptLong::NO_ARGUMENT],
  [ '--disable-code-quality',           GetoptLong::NO_ARGUMENT],
  [ '--disable-code-style',             GetoptLong::NO_ARGUMENT],
  [ '--disable-owasp-ror-cheatsheet',   GetoptLong::NO_ARGUMENT],
  [ '--disable-owasp-top-10',           GetoptLong::NO_ARGUMENT],

  # Search knowledge base
  [ '--search-knowledge-base',  '-S',   GetoptLong::REQUIRED_ARGUMENT],
  # List stuff
  [ '--list-knowledge-base',            GetoptLong::NO_ARGUMENT],
  [ '--list-known-framework',           GetoptLong::NO_ARGUMENT],
  [ '--list-known-families',            GetoptLong::NO_ARGUMENT],
  # please save output to file
  [ '--file',                   '-F',   GetoptLong::REQUIRED_ARGUMENT],
  # specify an alternate config file
  [ '--config-file',            '-c',   GetoptLong::REQUIRED_ARGUMENT],

  # service options
  [ '--verbose',                '-V',   GetoptLong::NO_ARGUMENT],
  [ '--debug',                  '-D',   GetoptLong::NO_ARGUMENT],
  [ '--version',                '-v',   GetoptLong::NO_ARGUMENT],
  [ '--help',                   '-h',   GetoptLong::NO_ARGUMENT]
)
opts.quiet=true

engine  = nil


options = Codesake::Dawn::Utils.read_conf(Codesake::Dawn::Utils.find_conf(true))
check = ""
guess = {:name=>"", :version=>"", :connected_gems=>[]}

begin
opts.each do |opt, val|
  case opt
  when '--version'
    puts "#{Codesake::Dawn::VERSION} (build: #{Codesake::Dawn::BUILD}) [#{Codesake::Dawn::CODENAME}]"
    Kernel.exit(0)
  when '--config-file'
    options = Codesake::Dawn::Utils.read_conf(val)
  when '--disable-cve-bulletins'
    options[:enabled_checks].delete(:cve_bulletin)
  when '--disable-code-quality'
    options[:enabled_checks].delete(:code_quality)
  when '--disable-code-style'
    options[:enabled_checks].delete(:code_style)
  when '--disable-owasp-ror-cheatsheet'
    options[:enabled_checks].delete(:owasp_ror_cheatsheet)
  when '--disable-owasp-top-10'
    options[:enabled_checks].delete(:owasp_top_10_1)
    options[:enabled_checks].delete(:owasp_top_10_2)
    options[:enabled_checks].delete(:owasp_top_10_3)
    options[:enabled_checks].delete(:owasp_top_10_4)
    options[:enabled_checks].delete(:owasp_top_10_5)
    options[:enabled_checks].delete(:owasp_top_10_6)
    options[:enabled_checks].delete(:owasp_top_10_7)
    options[:enabled_checks].delete(:owasp_top_10_8)
    options[:enabled_checks].delete(:owasp_top_10_9)
    options[:enabled_checks].delete(:owasp_top_10_10)
  when '--list-known-families'
    printf "Codesake::Dawn supports following check families:\n\n"
    puts Codesake::Dawn::Kb::BasicCheck.families
    Kernel.exit(0)
  when '--json'
    options[:output] = "json"
  when '--ascii-tabular-report'
    options[:output] = "tabular"
  when '--html'
    options[:output] = "html"
  when '--rails'
    options[:mvc]=:rails
  when '--sinatra'
    options[:mvc]=:sinatra
  when '--padrino'
    options[:mvc]=:padrino
  when '--file'
    options[:filename] = val
  when '--gem-lock'
    options[:gemfile_scan] = true
    unless val.empty?
      options[:gemfile_name] = val
      guess = Codesake::Dawn::Utils.guess_mvc(val)
    end
  when '--verbose'
    options[:verbose]=true
  when '--count-only'
    options[:output] = "count"
  when '--debug'
    options[:debug] = true
  when '--exit-on-warn'
    options[:exit_on_warn] = true

  when '--search-knowledge-base'
    found = Codesake::Dawn::KnowledgeBase.find(nil, val)
    puts "#{val} found in knowledgebase." if found
    puts "#{val} not found in knowledgebase" if ! found
    Kernel.exit(0)

  when '--list-knowledge-base'
    puts Codesake::Dawn::Utils.dump_knowledge_base(options[:verbose])
    Kernel.exit(0)
  when '--list-known-framework'
    puts "Ruby MVC framework supported by #{APPNAME}:"
    LIST_KNOWN_FRAMEWORK.each do |mvc|
      puts "* #{mvc}"
    end
    Kernel.exit(0)
  when '--help'
    Kernel.exit(Codesake::Dawn::Utils.help)
  end
end
rescue GetoptLong::InvalidOption => e
  $logger.helo APPNAME, Codesake::Dawn::VERSION
  $logger.err e.message
  Kernel.exit(Codesake::Dawn::Utils.help)
end

target=ARGV.shift

$logger.helo APPNAME, Codesake::Dawn::VERSION
trap("INT")   { $logger.die('[INTERRUPTED]') }
$logger.die("missing target") if target.nil? && options[:gemfile_name].empty?
$logger.die("invalid directory (#{target})") if options[:gemfile_name].empty?  &&! Codesake::Dawn::Utils.is_good_target?(target)
$logger.die("if scanning Gemfile.lock file you must not force target MVC using one from -r, -s or -p flag") if ! options[:mvc].empty? && options[:gemfile_scan]
$logger.debug("security check enabled: #{options[:enabled_checks]}") if options[:debug]


## MVC auto detect.
# Skipping MVC autodetect if it's already been done by guess_mvc when choosing Gemfile.lock scan

unless options[:gemfile_scan]
  begin
    if options[:mvc].empty?
      engine = Codesake::Dawn::Utils.detect_mvc(target, options[:debug])
      $logger.debug("using #{engine.class.name} engine via autodetect") if options[:debug]
    else
      engine = Codesake::Dawn::Rails.new({:target=>target, :debug=>options[:debug], :name=>"rails"})        if options[:mvc] == :rails
      engine = Codesake::Dawn::Sinatra.new({:target=>target, :debug=>options[:debug], :name=>"sinatra"})    if options[:mvc] == :sinatra
      engine = Codesake::Dawn::Padrino.new({:target=>target, :debug=>options[:debug], :name=>"padrino"})    if options[:mvc] == :padrino
    end
  rescue ArgumentError => e
    $logger.err(e.message)
    $logger.die("ruby framework auto detect failed. Please force if rails, sinatra or padrino with -r, -s or -p flags") if engine.nil?
  end
else
  engine = Codesake::Dawn::GemfileLock.new(target, options[:gemfile_name], guess) # if options[:gemfile_scan]
end

$logger.die("ruby framework auto detect failed. Please force if rails, sinatra or padrino with -r, -s or -p flags") if engine.nil?

if options[:exit_on_warn]
  Kernel.at_exit do
    if engine.count_vulnerabilities != 0
      Kernel.exit(engine.count_vulnerabilities)
    end
  end
end

if options[:debug]
  $logger.warn "putting engine in debug mode"
  engine.debug = true
end

$logger.die "missing target framework option" if engine.nil?
$logger.warn "this is a development Codesake::Dawn version" if Codesake::Dawn::RELEASE == "(development)"
$logger.die "nothing to do on #{target}" if ! options[:gemfile_scan] && !engine.disable_dependency_checks && ! engine.can_apply?

if engine.disable_dependency_checks
  $logger.warn "MVC was detected using only Gemfile, no version information are available"
  $logger.warn "checks against third party gem vulnerabilities will be disabled"
end

engine.load_knowledge_base(options[:enabled_checks])
ret = engine.apply_all

if options[:output] == "count"
  puts (ret)? engine.vulnerabilities.count : "-1" unless options[:output] == "json"
  puts (ret)? {:status=>"OK", :vulnerabilities_count=>engine.count_vulnerabilities}.to_json : {:status=>"KO", :vulnerabilities_count=>-1}.to_json
  Kernel.exit(0)
end

Codesake::Dawn::Reporter.new({:engine=>engine, :apply_all_code=>ret, :format=>options[:output].to_sym, :filename=>options[:filename]}).report
$logger.bye
